class VAE(nn.Module):
    def __init__(self, input_channels, input_dim, hidden_dims, latent_dim):
        super(VAE, self).__init__()
        
        self.input_dim = input_dim
        self.hidden_dims = hidden_dims.copy()  # Make a copy of hidden_dims
        
        # エンコーダーの定義
        modules = []
        in_channels = input_channels
        for h_dim in hidden_dims:
            modules.append(
                nn.Sequential(
                    nn.Conv2d(in_channels, h_dim, kernel_size=3, stride=2, padding=1),
                    nn.ReLU()
                )
            )
            in_channels = h_dim

        self.encoder = nn.Sequential(*modules)
        
        # 最後のエンコーダー出力のサイズを計算
        out_dim = input_dim
        for _ in hidden_dims:
            out_dim = (calculate_conv_output_dim(out_dim[0], 3, 2, 1), calculate_conv_output_dim(out_dim[1], 3, 2, 1))
        
        self.fc_mu = nn.Linear(hidden_dims[-1] * out_dim[0] * out_dim[1], latent_dim)
        self.fc_logvar = nn.Linear(hidden_dims[-1] * out_dim[0] * out_dim[1], latent_dim)
        
        self.fc_decode = nn.Linear(latent_dim, hidden_dims[-1] * out_dim[0] * out_dim[1])
        
        # デコーダーの定義
        modules = []
        hidden_dims_reversed = hidden_dims[::-1]  # Reverse a copy of hidden_dims
        for i in range(len(hidden_dims_reversed) - 1):
            modules.append(
                nn.Sequential(
                    nn.ConvTranspose2d(hidden_dims_reversed[i], hidden_dims_reversed[i + 1], kernel_size=3, stride=2, padding=1, output_padding=1),
                    nn.ReLU()
                )
            )
        
        modules.append(
            nn.Sequential(
                nn.ConvTranspose2d(hidden_dims_reversed[-1], input_channels, kernel_size=3, stride=2, padding=1, output_padding=1),
                nn.Sigmoid()
            )
        )
        
        self.decoder = nn.Sequential(*modules)
    
    def encode(self, x):
        h = self.encoder(x)
        h = h.view(h.size(0), -1)
        mu = self.fc_mu(h)
        logvar = self.fc_logvar(h)
        return mu, logvar
    
    def reparameterize(self, mu, logvar):
        std = torch.exp(0.5 * logvar)
        eps = torch.randn_like(std)
        return mu + eps * std
    
    def decode(self, z):
        h = self.fc_decode(z)
        h = h.view(h.size(0), self.hidden_dims[-1], self.input_dim[0] // (2 ** len(self.hidden_dims)), self.input_dim[1] // (2 ** len(self.hidden_dims)))
        return self.decoder(h)
    
    def forward(self, x):
        mu, logvar = self.encode(x)
        z = self.reparameterize(mu, logvar)
        return self.decode(z), mu, logvar
